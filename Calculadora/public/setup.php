<?php
/**
 * Script de inicializaci√≥n para TaxImporter
 * Ejecutar una sola vez despu√©s de implementar las nuevas funcionalidades
 * 
 * Uso: php public/setup.php
 */

// Cargar CodeIgniter
require_once __DIR__ . '/../vendor/autoload.php';
$app = \Config\Services::codeigniter();
$app->initialize();

echo "üöÄ Iniciando configuraci√≥n de TaxImporter...\n\n";

// 1. Verificar y crear tabla de categor√≠as
echo "üì¶ 1. Verificando tabla de categor√≠as...\n";
$db = \Config\Database::connect();

try {
    // Verificar si la tabla existe
    if (!$db->tableExists('categorias_productos')) {
        echo "   ‚ùå Tabla 'categorias_productos' no existe. Ejecuta primero las migraciones SQL.\n";
        exit(1);
    }
    
    // Contar categor√≠as existentes
    $count = $db->table('categorias_productos')->countAll();
    echo "   ‚úÖ Tabla 'categorias_productos' encontrada con {$count} registros.\n";
    
} catch (Exception $e) {
    echo "   ‚ùå Error accediendo a la base de datos: " . $e->getMessage() . "\n";
    exit(1);
}

// 2. Actualizar tabla de historial con nuevas columnas
echo "\nüìä 2. Verificando columnas de historial...\n";

try {
    $fields = $db->getFieldNames('historial_calculos');
    
    $requiredFields = ['categoria_id', 'metodo_pago', 'valor_cif_usd', 'excedente_400_usd'];
    $missingFields = array_diff($requiredFields, $fields);
    
    if (empty($missingFields)) {
        echo "   ‚úÖ Todas las columnas requeridas est√°n presentes.\n";
    } else {
        echo "   ‚ùå Faltan columnas: " . implode(', ', $missingFields) . "\n";
        echo "   üìã Ejecuta el ALTER TABLE del paso 1 de las migraciones.\n";
    }
    
} catch (Exception $e) {
    echo "   ‚ùå Error verificando estructura: " . $e->getMessage() . "\n";
}

// 3. Verificar cotizaciones iniciales
echo "\nüí± 3. Verificando cotizaciones iniciales...\n";

try {
    $dolarService = new \App\Services\DolarService();
    
    // Intentar obtener cotizaciones actuales
    $cotizaciones = $dolarService->obtenerCotizaciones();
    
    if (isset($cotizaciones['tarjeta']) && isset($cotizaciones['MEP'])) {
        echo "   ‚úÖ Cotizaciones obtenidas exitosamente:\n";
        echo "      üí≥ D√≥lar Tarjeta: $" . number_format($cotizaciones['tarjeta'], 2) . " ARS\n";
        echo "      üìà D√≥lar MEP: $" . number_format($cotizaciones['MEP'], 2) . " ARS\n";
    } else {
        echo "   ‚ö†Ô∏è  No se pudieron obtener cotizaciones de la API.\n";
        echo "      Se usar√°n valores por defecto.\n";
    }
    
} catch (Exception $e) {
    echo "   ‚ö†Ô∏è  Error obteniendo cotizaciones: " . $e->getMessage() . "\n";
    echo "      El sistema funcionar√° con valores por defecto.\n";
}

// 4. Probar servicio de c√°lculo de impuestos
echo "\nüßÆ 4. Probando servicio de c√°lculo de impuestos...\n";

try {
    $calculoService = new \App\Services\CalculoImpuestosService();
    
    // Probar c√°lculo b√°sico bajo franquicia
    $testBajoFranquicia = $calculoService->calcularImpuestos(100, 25, 1, 'tarjeta');
    
    if (isset($testBajoFranquicia['totales']['total_ars'])) {
        echo "   ‚úÖ C√°lculo bajo franquicia: $" . number_format($testBajoFranquicia['totales']['total_ars'], 2) . " ARS\n";
    }
    
    // Probar c√°lculo sobre franquicia
    $testSobreFranquicia = $calculoService->calcularImpuestos(500, 25, 1, 'tarjeta');
    
    if (isset($testSobreFranquicia['totales']['total_ars'])) {
        echo "   ‚úÖ C√°lculo sobre franquicia: $" . number_format($testSobreFranquicia['totales']['total_ars'], 2) . " ARS\n";
    }
    
    echo "   ‚úÖ Servicio de c√°lculo funcionando correctamente.\n";
    
} catch (Exception $e) {
    echo "   ‚ùå Error en servicio de c√°lculo: " . $e->getMessage() . "\n";
}

// 5. Verificar permisos de archivos
echo "\nüìÅ 5. Verificando permisos...\n";

$directoriesWrite = [
    'writable/logs',
    'writable/cache', 
    'writable/session',
    'writable/uploads'
];

foreach ($directoriesWrite as $dir) {
    $fullPath = ROOTPATH . $dir;
    if (is_writable($fullPath)) {
        echo "   ‚úÖ {$dir} - escribible\n";
    } else {
        echo "   ‚ùå {$dir} - sin permisos de escritura\n";
        echo "      Ejecuta: chmod -R 777 {$fullPath}\n";
    }
}

// 6. Generar configuraci√≥n de ejemplo
echo "\n‚öôÔ∏è  6. Generando archivo de configuraci√≥n...\n";

$configContent = "<?php
/**
 * Configuraci√≥n personalizada de TaxImporter
 * Generado autom√°ticamente el " . date('Y-m-d H:i:s') . "
 */

return [
    // Configuraci√≥n de la aplicaci√≥n
    'app' => [
        'name' => 'TaxImporter',
        'version' => '2.0.0',
        'timezone' => 'America/Argentina/Buenos_Aires',
    ],
    
    // Configuraci√≥n de impuestos
    'impuestos' => [
        'franquicia_usd' => 400.00,
        'iva_porcentaje' => 21.00,
        'tasa_estadistica' => 3.00,
        'percepcion_ganancias' => 30.00,
    ],
    
    // Configuraci√≥n de APIs externas
    'apis' => [
        'dolarapi_url' => 'https://dolarapi.com/v1/dolares/',
        'timeout_seconds' => 10,
        'cache_minutes' => 60,
    ],
    
    // L√≠mites del sistema
    'limites' => [
        'max_precio_usd' => 50000,
        'max_envio_usd' => 1000,
        'max_calculos_por_usuario' => 1000,
    ],
];
";

$configPath = APPPATH . 'Config/TaxImporter.php';
if (file_put_contents($configPath, $configContent)) {
    echo "   ‚úÖ Archivo de configuraci√≥n creado en: app/Config/TaxImporter.php\n";
} else {
    echo "   ‚ùå No se pudo crear el archivo de configuraci√≥n.\n";
}

// 7. Resumen final
echo "\n" . str_repeat("=", 60) . "\n";
echo "üéâ CONFIGURACI√ìN COMPLETADA\n";
echo str_repeat("=", 60) . "\n";

echo "\nüìã RESUMEN:\n";
echo "   ‚úÖ Base de datos verificada\n";
echo "   ‚úÖ Servicios de c√°lculo funcionando\n";
echo "   ‚úÖ APIs de cotizaci√≥n configuradas\n";
echo "   ‚úÖ Configuraci√≥n generada\n";

echo "\nüöÄ PR√ìXIMOS PASOS:\n";
echo "   1. Accede a tu aplicaci√≥n web\n";
echo "   2. Inicia sesi√≥n o crea una cuenta\n";
echo "   3. Crea tu primera calculadora de impuestos\n";
echo "   4. ¬°Disfruta calculando impuestos de importaci√≥n!\n";

echo "\nüîó URLs IMPORTANTES:\n";
echo "   ‚Ä¢ Historial: " . site_url('historial') . "\n";
echo "   ‚Ä¢ Nueva calculadora: " . site_url('historial/crear') . "\n";
echo "   ‚Ä¢ Registro: " . site_url('usuario/registro') . "\n";

echo "\nüìû SOPORTE:\n";
echo "   ‚Ä¢ Logs: writable/logs/log-" . date('Y-m-d') . ".php\n";
echo "   ‚Ä¢ Configuraci√≥n: app/Config/TaxImporter.php\n";

echo "\n‚ú® ¬°TaxImporter est√° listo para usar!\n\n";

// 8. Opcional: Crear usuario de prueba
echo "‚ùì ¬øDeseas crear un usuario de prueba? (y/n): ";
$handle = fopen("php://stdin", "r");
$response = trim(fgets($handle));
fclose($handle);

if (strtolower($response) === 'y' || strtolower($response) === 'yes') {
    try {
        $userModel = new \App\Models\UsuarioModel();
        
        $userData = [
            'nombre' => 'Usuario de Prueba',
            'email' => 'prueba@taximporter.com',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'fecha_registro' => date('Y-m-d H:i:s')
        ];
        
        if ($userModel->insert($userData)) {
            echo "‚úÖ Usuario de prueba creado:\n";
            echo "   üìß Email: prueba@taximporter.com\n";
            echo "   üîë Password: 123456\n\n";
        }
        
    } catch (Exception $e) {
        echo "‚ùå Error creando usuario de prueba: " . $e->getMessage() . "\n\n";
    }
}

echo "üèÅ Setup completado exitosamente. ¬°Que tengas un buen d√≠a!\n";
?>